@startuml "Vue Logique - Microservices"
title Vue Logique - Architecture Évoluée
allowmixing
left to right direction
skinparam class {
  BackgroundColor White
  ArrowColor DarkGreen
  BorderColor Black
}

package "CatalogueMcService" as catalogueMcService {
    rectangle "Controllers" as catalogueSvcControllers {
        class "CatalogueController" as catalogueController {
            +GetProduits()
            +GetProduit(produitId: int)
            +ModifierProduit(produitId: int, produit: ProduitDto)
            +Rechercher(query: string)
        }
    }

    class "CatalogueDbContext" as catalogueDbContext {
    }

    rectangle "Models" as catalogueSvcModels {
        class "Produit" as produit {
            +ProduitId: int
            +Nom: string
            +Prix: decimal
            +Categorie: string
            +Description: string
        }
    }
    
    rectangle "Services" as catalogueSvcServices {
        class "CatalogueService" as catalogueService {
            +GetAllProduits()
            +GetProduitByIdAsync(id: int)
            +ModifierProduitAsync(id: int, produit: ProduitDto)
            +RechercherProduitsAsync(query: string)
        }

        interface "ICatalogueService" as icatalogueService {
        }
    }

    catalogueController --> catalogueService : utilise
    catalogueService ..|> icatalogueService : implémente
    catalogueSvcServices --> catalogueDbContext : utilise
    catalogueDbContext --> catalogueDb : accède
    catalogueSvcServices --> catalogueSvcModels : manipule
}

package "InventaireMcService" as inventaireMcService {
    rectangle "Controllers" as inventaireSvcControllers {
        class "ReapprovisionnementController" as reapproController {
            +CreerDemande()
            +GetEnAttente()
            +ValiderDemande(id: int)
        }

        class "StockController" as stockController {
            +GetAll()
            +GetStockCentral()
            +GetStockMagasin(magasinId: int)
            +UpdateStock(magasinId: int, produitId: int, quantite: int)
        }
    }

    class "InventaireDbContext" as inventaireDbContext {
    }

    rectangle "Models" as inventaireSvcModels {
        class "StockItem" as stockIem {
            +MagasinId: int
            +ProduitId: int
            +Quantite: int
        }

        class "DemandeReapprovisionnement" as demandeReappro {
            +DemandeId: int
            +ProduitId: int
            +MagasinId: int
            +Quantite: int
            +Statut: string
        }
    }

    rectangle "Services" as inventaireSvcServices {
        class "ReapprovisionnementService" as reapproService {
            +CreerDemandeAsync(demande: DemandeReapprovisionnementDto)
            +GetEnAttenteAsync()
            +ValiderDemandeAsync(id: int)
        }

        class "StockService" as stockService {
            +GetAllStocksAsync()
            +GetStockCentralAsync()
            +GetStockMagasinAsync(magasinId: int)
            +UpdateStockAsync(magasinId: int, produitId: int, quantite: int)
        }

        class "InventaireService" as inventaireService {
            +TransfererStock(magasinId: int, produitId: int, quantite: int)
        }

        interface "IReapprovisionnementService" as iReapproService {
        }

        interface "IStockService" as iStockService {
        }

        interface "IInventaireService" as iInventaireService {
        }
    }

    reapproController --> reapproService : utilise
    stockController --> stockService : utilise
    reapproService ..|> iReapproService : implémente
    stockService ..|> iStockService : implémente
    inventaireService ..|> iInventaireService : implémente
    inventaireDbContext --> inventaireDb : accède
    inventaireSvcServices --> inventaireSvcModels : manipule
    reapproService --> inventaireService : utilise
}

package "VenteMcService" as venteMcService {
    rectangle "Controllers" as venteSvcControllers {
        class "VenteController" as venteController {
            +GetAll()
            +GetById(id: int)
            +EnregistrerVente(vente: VenteDto)
            +GetByMagasin(magasinId: int)
            +Delete(id: int)
        }
    }

    class "VenteDbContext" as venteDbContext {
    }

    rectangle "Models" as venteSvcModels {
        class "Vente" as vente {
            +VenteId: int
            +MagasinId: int?
            +ClientId: int?
            +IsEnLigne: bool
            +Date: DateTime
            +Lignes: List<LigneVente>
        }

        class "LigneVente" as ligneVente {
            +LigneVenteId: int
            +VenteId: int
            +ProduitId: int
            +Quantite: int
            +PrixUnitaire: decimal
        }
    }

    rectangle "Services" as venteSvcServices {
        class "VenteService" as venteService {
            +GetAllVentes()
            +GetVenteByIdAsync(id: int)
            +EnregistrerVenteAsync(vente: VenteDto)
            +GetVentesByMagasinAsync(magasinId: int)
            +DeleteVenteAsync(id: int)
        }

        interface "IVenteService" as iVenteService {
        }
    }

    venteController --> venteService : utilise
    venteService ..|> iVenteService : implémente
    venteSvcServices --> venteDbContext : utilise
    venteSvcServices --> venteSvcModels : manipule
}

package "SagaOchestrator" as sagaOrchestrator {
    rectangle "Controllers" as sagaControllers {
        class "SagaController" as sagaController {
            +VenteSagaController(vente: VenteDto)
        }
    }

    class "SagaDbContext" as sagaDbContext {
    }

    rectangle "Models" {
        enum "EtatVenteSaga" {
            Init,
            ProduitValide,
            QuantiteStockValide,
            StockDeduit,
            VenteCréée,
            CommandeConfirmee,
            ErreurProduit,
            ErreurStock,
            ErreurVente,
            ErreurCompensation,
        }

        class "SagaVente" {
            +SagaVenteId: int
            +MagasinId: int
            +Etat: EtatVenteSaga
            +UpdatedAt: DateTime
            +ErrorMessage: string
        }
    }

    rectangle "Services" as sagaServices {
        class "Orchestrator" {
            +EnregistrerVenteAsync(vente: VenteDto)
            -UpdateEtat(SagaVente saga, EtatVenteSaga etat)
            -Fail(SagaVente saga, EtatVenteSaga etat, string msg)
        }

        interface "IOrchestrator" {
        }
    }

    sagaController --> Orchestrator : utilise
    Orchestrator ..|> IOrchestrator : implémente
    sagaServices --> sagaDbContext : utilise
    sagaServices --> Models : manipule
}

package "MagasinCentral" as clientApp {
    rectangle "Controllers" as clientAppControllers {
        class "AdministrationController" as administrationController {
        }

        class "CatalogueController" as catalogueController {
        }

        class "ECommerceController" as eCommerceController {
        }

        class "InventaireController" as inventaireController {
        }

        class "VenteController" as venteControllerClient {
        }
    }
}

venteControllerClient --> sagaController : communique via gateway
sagaController --> inventaireMcService : communique via gateway
sagaController --> catalogueMcService : communique via gateway
sagaController --> venteMcService : communique via gateway

@enduml
